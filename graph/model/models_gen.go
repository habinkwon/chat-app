// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ChatEvent struct {
	Type    ChatEventType `json:"type"`
	ChatID  int64         `json:"chatId"`
	Message *Message      `json:"message"`
	User    *User         `json:"user"`
}

type User struct {
	ID               int64      `json:"id"`
	Name             string     `json:"name"`
	Nickname         string     `json:"nickname"`
	Email            *string    `json:"email"`
	Picture          *string    `json:"picture"`
	LivingPlace      *string    `json:"livingPlace"`
	Preference1      *string    `json:"preference1"`
	Preference2      *string    `json:"preference2"`
	Preference3      *string    `json:"preference3"`
	SelfIntroduction *string    `json:"selfIntroduction"`
	Role             UserRole   `json:"role"`
	Status           UserStatus `json:"status"`
}

type ChatEventType string

const (
	ChatEventTypeMessagePosted  ChatEventType = "MESSAGE_POSTED"
	ChatEventTypeMessageEdited  ChatEventType = "MESSAGE_EDITED"
	ChatEventTypeMessageDeleted ChatEventType = "MESSAGE_DELETED"
	ChatEventTypeUserTyping     ChatEventType = "USER_TYPING"
)

var AllChatEventType = []ChatEventType{
	ChatEventTypeMessagePosted,
	ChatEventTypeMessageEdited,
	ChatEventTypeMessageDeleted,
	ChatEventTypeUserTyping,
}

func (e ChatEventType) IsValid() bool {
	switch e {
	case ChatEventTypeMessagePosted, ChatEventTypeMessageEdited, ChatEventTypeMessageDeleted, ChatEventTypeUserTyping:
		return true
	}
	return false
}

func (e ChatEventType) String() string {
	return string(e)
}

func (e *ChatEventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChatEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChatEventType", str)
	}
	return nil
}

func (e ChatEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserRole string

const (
	UserRoleUser  UserRole = "USER"
	UserRoleGuest UserRole = "GUEST"
)

var AllUserRole = []UserRole{
	UserRoleUser,
	UserRoleGuest,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleUser, UserRoleGuest:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusOffline UserStatus = "OFFLINE"
	UserStatusOnline  UserStatus = "ONLINE"
)

var AllUserStatus = []UserStatus{
	UserStatusOffline,
	UserStatusOnline,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusOffline, UserStatusOnline:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
