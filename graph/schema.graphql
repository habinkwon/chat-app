directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Time

type Query {
	me: User!
	user(id: ID!): User
	chat(id: ID!): Chat
	chats(first: Int, after: ID): [Chat!]!
}

type Mutation {
	setAsOnline: User
	createChat(userIds: [ID!]!): Chat!
	deleteChat(id: ID!): Chat!
	postMessage(chatId: ID!, text: String!, replyTo: ID): Message!
	editMessage(id: ID!, text: String!): Message!
	deleteMessage(id: ID!): Message!
}

type Subscription {
	chatEvent(userId: ID!): ChatEvent!
}

type User {
	id: ID!
	name: String!
	username: String!
	email: String!
	status: UserStatus! @goField(forceResolver: true)
	createdAt: Time!
}

enum UserStatus {
	OFFLINE
	ONLINE
}

type Chat {
	id: ID!
	name: String!
	members: [User!]!
	messages(first: Int, after: ID, desc: Boolean): [Message!]!
	createdBy: User
	createdAt: Time!
	lastPostedAt: Time!
}

type Message {
	id: ID!
	type: MessageType!
	content: String!
	event: String!
	sender: User
	replyTo: Message
	createdAt: Time!
	editedAt: Time
}

enum MessageType {
	MESSAGE
	EVENT
}

type ChatEvent {
	type: ChatEventType!
	chatId: ID!
	message: Message
}

enum ChatEventType {
	MESSAGE_POSTED
	MESSAGE_EDITED
	MESSAGE_DELETED
}
