directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Time

type Query {
  me: User!
  user(id: ID!): User
  users(first: Int, after: ID): [User!]!
  chat(id: ID!): Chat
  chats(first: Int, after: ID): [Chat!]!
}

type Mutation {
  createChat(userIds: [ID!]!): Chat!
  deleteChat(id: ID!): Chat!
  postMessage(chatId: ID!, text: String!, replyTo: ID): Message!
  editMessage(id: ID!, text: String!): Message!
  deleteMessage(id: ID!): Message!
  setAsOnline: User
  userTyping(chatId: ID!): User
}

type Subscription {
  chatEvent: ChatEvent!
}

type User {
  id: ID!
  name: String!
  nickname: String!
  email: String
  picture: String
  livingPlace: String
  preference1: String
  preference2: String
  preference3: String
  selfIntroduction: String
  role: UserRole!
  status: UserStatus! @goField(forceResolver: true)
}

enum UserRole {
  USER
  GUEST
}

enum UserStatus {
  OFFLINE
  ONLINE
}

type Chat {
  id: ID!
  name: String! @goField(forceResolver: true)
  members: [User!]!
  messages(first: Int, after: ID, desc: Boolean): [Message!]!
  createdBy: User
  createdAt: Time!
  lastPostedAt: Time!
}

type Message {
  id: ID!
  content: String!
  event: String!
  sender: User
  replyTo: Message
  createdAt: Time!
  editedAt: Time
}

type ChatEvent {
  type: ChatEventType!
  chatId: ID!
  message: Message
  user: User @goField(forceResolver: true)
}

enum ChatEventType {
  MESSAGE_POSTED
  MESSAGE_EDITED
  MESSAGE_DELETED
  USER_TYPING
}
